currentcomponentsmall
Currentcomponentlarge


<template>
  <div class="currentcomponentsmall-management q-pa-md" style="background: #2d2d3a; color: white">
    <!-- Header Section -->
    <div class="text-h4 q-mb-lg text-weight-light" style="color: white">
      Currentcomponentlarges
    </div>

    <!-- Search Header Component -->
    <SearchHeader item-name="Currentcomponentlarge" v-model:search-term="filter" :has-selected="selectedCurrentcomponentlarges.length > 0"
      @add="openCreateDialog" @delete-selected="confirmDeleteSelected" />

    <!-- Data Table Component -->
    <DataTable :rows="currentcomponentsmalls" :columns="columns" :loading="loading" v-model:selected="selectedCurrentcomponentlarges"
      @edit="openEditDialog" @delete="confirmDelete" />

    <!-- Form Dialog Component -->
    <FormDialog v-model="dialog.show" :title="dialog.title" :is-valid="isFormValid" @save="handleSubmit"
      @cancel="dialog.show = false">
      <q-form @submit.prevent="handleSubmit" class="q-gutter-md">
        <q-input v-model.trim="form.name" label="Name" dark outlined required
          :rules="[(val) => !!val || 'Name is required']" placeholder="Enter name" />

        <q-select v-model="form.currentcomponentsmallTypeId" :options="currentcomponentsmallTypeOptions" label="Currentcomponentlarge Type" dark outlined required
          :rules="[(val) => !!val || 'Currentcomponentlarge Type is required']" option-value="value" option-label="label" />

        <q-input v-model.number="form.numberOfScalableUnits" type="number" label="Number of Scalable Units" dark
          outlined required :rules="[val => val > 0 || 'Must be greater than 0']"
          placeholder="Enter number of scalable units" />

        <q-input v-model.number="form.numberOfRacks" type="number" label="Number of Racks" dark outlined required
          :rules="[val => val > 0 || 'Must be greater than 0']" placeholder="Enter number of racks" />

        <q-input v-model.number="form.numberOfTilesBetweenScalableUnitRows" type="number"
          label="Tiles Between Scalable Unit Rows" dark outlined required
          :rules="[val => val >= 0 || 'Must be 0 or greater']" placeholder="Enter number of tiles between rows" />

        <q-input v-model.number="form.numberOfTilesBetwenScalableUnits" type="number"
          label="Tiles Between Scalable Units" dark outlined required
          :rules="[val => val >= 0 || 'Must be 0 or greater']" placeholder="Enter number of tiles between units" />
      </q-form>
    </FormDialog>

    <!-- Confirmation Dialog Component -->
    <ConfirmationDialog v-model="deleteDialog.show" :message="deleteConfirmMessage" confirm-label="DELETE"
      @confirm="handleDelete" />
  </div>
</template>

<script lang="ts">
import { defineComponent, ref, onMounted, computed } from 'vue';
import { useRoute } from 'vue-router';
import { Currentcomponentlarge, CurrentcomponentlargeType } from 'src/types/models';
import { currentcomponentsmallService } from 'src/services/currentcomponentsmallService';
import SearchHeader from '../FormComponents/SearchHeader.vue';
import DataTable from '../FormComponents/DataTable.vue';
import FormDialog from '../FormComponents/FormDialog.vue';
import ConfirmationDialog from '../FormComponents/ConfirmationDialog.vue';

export default defineComponent({
  name: 'CurrentcomponentlargeList',
  components: {
    SearchHeader,
    DataTable,
    FormDialog,
    ConfirmationDialog,
  },
  emits: ['currentcomponentsmall-updated'],

  setup(_, { emit }) {
    const route = useRoute();
    const customerId = Number(route.query.customerId);
    const dataHallId = Number(route.path.split('/')[2]);
    const loading = ref(false);
    const currentcomponentsmalls = ref<Currentcomponentlarge[]>([]);
    const currentcomponentsmallTypes = ref<CurrentcomponentlargeType[]>([]);
    const filter = ref('');
    const selectedCurrentcomponentlarges = ref<Currentcomponentlarge[]>([]);

    const columns = [
      {
        name: 'name',
        required: true,
        label: 'Name',
        align: 'left' as 'left',
        field: 'name',
        sortable: true,
      },
      {
        name: 'currentcomponentsmallType',
        required: true,
        label: 'Currentcomponentlarge Type',
        align: 'left' as 'left',
        field: (row: Currentcomponentlarge) => row.currentcomponentsmallType?.name,
        sortable: true,
      },
      {
        name: 'numberOfScalableUnits',
        required: true,
        label: 'Scalable Units',
        align: 'left' as 'left',
        field: 'numberOfScalableUnits',
        sortable: true,
      },
      {
        name: 'numberOfRacks',
        required: true,
        label: 'Racks',
        align: 'left' as 'left',
        field: 'numberOfRacks',
        sortable: true,
      },
    ];

    const dialog = ref({
      show: false,
      title: '',
      mode: 'create',
    });

    const deleteDialog = ref({
      show: false,
      currentcomponentsmallId: null as number | null,
    });

    const form = ref<Partial<Currentcomponentlarge>>({});

    const isFormValid = computed(() => {
      return form.value !== undefined;
    });

    const deleteConfirmMessage = computed(() => {
      return selectedCurrentcomponentlarges.value.length > 0
        ? `Are you sure you want to delete ${selectedCurrentcomponentlarges.value.length} currentcomponentsmall(s)?`
        : 'Are you sure you want to delete this currentcomponentsmall?';
    });

    const currentcomponentsmallTypeOptions = computed(() =>
      currentcomponentsmallTypes.value.map(type => ({
        label: type.name,
        value: type.id,
      }))
    );

    const resetFormData = () => {
      form.value = {
        customerId: customerId,
        dataHallId: dataHallId,
        numberOfScalableUnits: 0,
        numberOfRacks: 0,
        numberOfTilesBetweenScalableUnitRows: 0,
        numberOfTilesBetwenScalableUnits: 0,
      };
    };

    const fetchCurrentcomponentlarges = async () => {
      loading.value = true;
      try {
        currentcomponentsmalls.value = await currentcomponentsmallService.getCurrentcomponentlargesByCustomerAndDataHallId(
          customerId,
          dataHallId
        );
      } catch (error) {
        console.error('Failed to fetch currentcomponentsmalls:', error);
      } finally {
        loading.value = false;
      }
    };

    const fetchCurrentcomponentlargeTypes = async () => {
      try {
        currentcomponentsmallTypes.value = await currentcomponentsmallService.getCurrentcomponentlargeTypes(
          customerId,
          dataHallId
        );
      } catch (error) {
        console.error('Failed to fetch currentcomponentsmall types:', error);
      }
    };

    const openCreateDialog = () => {
      resetFormData();
      dialog.value = {
        show: true,
        title: 'Create New Currentcomponentlarge',
        mode: 'create',
      };
    };

    const openEditDialog = (currentcomponentsmall: Currentcomponentlarge) => {
      form.value = { ...currentcomponentsmall };
      dialog.value = {
        show: true,
        title: 'Edit Currentcomponentlarge',
        mode: 'edit',
      };
      deleteDialog.value.currentcomponentsmallId = currentcomponentsmall.id;
    };

    const confirmDelete = (currentcomponentsmallId: number) => {
      deleteDialog.value = {
        show: true,
        currentcomponentsmallId: currentcomponentsmallId,
      };
    };

    const confirmDeleteSelected = () => {
      deleteDialog.value.show = true;
    };

    const handleSubmit = async () => {
      try {
        const submitData = {
          ...form.value,
          customerId: Number(form.value.customerId),
          dataHallId: Number(form.value.dataHallId),
          currentcomponentsmallTypeId: typeof form.value.currentcomponentsmallTypeId === 'object'
            ? (form.value.currentcomponentsmallTypeId as any).value
            : form.value.currentcomponentsmallTypeId,
        };

        if (dialog.value.mode === 'create') {
          await currentcomponentsmallService.createCurrentcomponentlarge(submitData);
        } else {
          if (deleteDialog.value.currentcomponentsmallId) {
            await currentcomponentsmallService.updateCurrentcomponentlarge(deleteDialog.value.currentcomponentsmallId, submitData);
          }
        }
        dialog.value.show = false;
        await fetchCurrentcomponentlarges();
        emit('currentcomponentsmall-updated');
      } catch (error) {
        console.error(`Failed to ${dialog.value.mode} currentcomponentsmall:`, error);
      }
    };

    const handleDelete = async () => {
      try {
        if (selectedCurrentcomponentlarges.value.length > 0) {
          for (const currentcomponentsmall of selectedCurrentcomponentlarges.value) {
            await currentcomponentsmallService.deleteCurrentcomponentlarge(currentcomponentsmall.id);
          }
          selectedCurrentcomponentlarges.value = [];
        } else if (deleteDialog.value.currentcomponentsmallId) {
          await currentcomponentsmallService.deleteCurrentcomponentlarge(deleteDialog.value.currentcomponentsmallId);
        }
        await fetchCurrentcomponentlarges();
        emit('currentcomponentsmall-updated');
        deleteDialog.value.show = false;
      } catch (error) {
        console.error('Failed to delete currentcomponentsmall(s):', error);
      }
    };

    onMounted(() => {
      fetchCurrentcomponentlarges();
      fetchCurrentcomponentlargeTypes();
    });

    return {
      loading,
      currentcomponentsmalls,
      columns,
      filter,
      dialog,
      deleteDialog,
      form,
      selectedCurrentcomponentlarges,
      deleteConfirmMessage,
      isFormValid,
      currentcomponentsmallTypeOptions,
      openCreateDialog,
      openEditDialog,
      confirmDelete,
      confirmDeleteSelected,
      handleSubmit,
      handleDelete,
    };
  },
});
</script>

<style scoped>
.hover-row:hover {
  background: rgba(255, 255, 255, 0.05) !important;
}

.q-table tbody td {
  font-size: 0.875rem;
}

.q-table th {
  font-size: 0.875rem;
}

.q-btn[color="orange"] {
  background: #ff6b2c !important;
}

.q-toolbar-title {
  font-weight: bold;
  font-size: 1.2rem;
  color: white;
}

.q-table {
  margin-top: 1rem;
}
</style>
